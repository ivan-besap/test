# Configuración de la conexión a la base de datos MySQL Docker AWS
spring.datasource.url=jdbc:mysql://52.14.116.236:3306/evolgreen
spring.datasource.username=evol
spring.datasource.password=green
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

## Configuración de la conexión a la base de datos MySQL Local
#spring.datasource.url=jdbc:mysql://localhost:3306/evolgreen
#spring.datasource.username=root
#spring.datasource.password=
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de Correo
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=evolgreenmail@besap.cl
spring.mail.password=mail2024

# Configuración de Hibernate y JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Configuración de HikariCP (pool de conexiones)

# Número máximo de conexiones en el pool. Este valor debe ser ajustado
# según la carga esperada de la aplicación y las capacidades de la base de datos.
spring.datasource.hikari.maximum-pool-size=20

# Número mínimo de conexiones que se mantendrán en el pool,
# incluso si están inactivas. Este valor debe ser ajustado
# para balancear la latencia y el uso de recursos.
spring.datasource.hikari.minimum-idle=5

# Tiempo máximo (en milisegundos) que una conexión puede estar inactiva
# en el pool antes de ser eliminada. Un valor más bajo puede liberar recursos,
# pero puede aumentar la latencia para nuevas conexiones.
spring.datasource.hikari.idle-timeout=60000

# Tiempo máximo (en milisegundos) que una solicitud de conexión
# puede estar esperando en la cola antes de lanzar una excepción.
# Este valor debe ser ajustado según la latencia aceptable para la aplicación.
spring.datasource.hikari.connection-timeout=30000

# Tiempo máximo de vida (en milisegundos) de una conexión en el pool.
# Después de este tiempo, la conexión será eliminada y reemplazada
# por una nueva. Esto ayuda a mitigar problemas de conexión a largo plazo.
spring.datasource.hikari.max-lifetime=1800000

server.address = 0.0.0.0
server.port=8088
server.forward-headers-strategy=native


# Configuración de Amazon MQ usando Protocolo WSS
#spring.activemq.broker-url=ssl://b-e5acc38c-2617-4ce2-9ac0-009e5e858a2c-1.mq.us-west-2.amazonaws.com:61617
#spring.activemq.user=eVolGreen
#spring.activemq.password=eVolGreen123

#Stomp
#amazon.mq.wss.endpoint=wss://b-53524436-44e2-4432-b76c-fc8ff66073ab-1.mq.us-east-2.amazonaws.com:61619
#amazon.mq.queue.name=/queue/ocppQueue
#amazon.mq.username=eVolGreen
#amazon.mq.password=eVolGreen123

spring.activemq.packages.trust-all=true
server.tomcat.websocket.enabled=true
server.tomcat.websocket.timeout=60000 # 60 segundos
server.tomcat.websocket.maxMessageSize=32768 # 32KB
server.tomcat.websocket.maxTextMessageBufferSize=32768
server.tomcat.websocket.maxBinaryMessageBufferSize=32768


# Dominio de la aplicación
app.domain=${APP_DOMAIN:evolgreen.com}
#server.ssl.key-store=classpath:keystore.jks
#server.ssl.key-store-password=evolgreenpassword
#server.ssl.key-store-type=JKS
#server.ssl.key-alias=evolgreen

debug=true

logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.apache.tomcat.websocket=TRACE
logging.level.org.springframework.web.socket=TRACE
logging.level.org.springframework.messaging.simp.stomp=TRACE
logging.level.org.springframework.web.socket.client=TRACE
logging.level.org.springframework.web.socket.messaging=TRACE
